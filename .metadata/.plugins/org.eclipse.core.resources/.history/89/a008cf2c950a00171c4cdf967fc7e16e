/*
 * Group Members: Kelsey Cameron, Justin Bates
 * Homework #3 Temperature Clock
 */


#include "msp430.h"
#include <stdio.h>

struct temperature{
	unsigned int tempInC;
	unsigned int tempInF;
	unsigned int hour;
	unsigned int min;
	unsigned int sec;


};

#define CALADC12_15V_30C  *((unsigned int *)0x1A1A)   // Temperature Sensor Calibration-30 C
                                                      //See device datasheet for TLV table memory mapping
#define CALADC12_15V_85C  *((unsigned int *)0x1A1C)   // Temperature Sensor Calibration-85 C



void init_UART(void);
void OUTA_UART(unsigned char A);
void init_Temps(void);
int getTemps(void);
void setTime(int h, int m, int s);
void displayTime();
void useCommands(char c);
unsigned char INCHAR_UART(void);
volatile unsigned int seconds;
volatile unsigned int minutes;
volatile unsigned int multiplesoffive;
volatile unsigned int hours;
volatile unsigned int index;
void initializeStruct();
unsigned int temp;

struct temperature alltemps[32];

int main(void){

	volatile unsigned char a;
	volatile unsigned int i;
	volatile unsigned int currenttemp;
		index = 0;
		initializeStruct();
		WDTCTL = WDTPW + WDTHOLD;
		init_UART();


		REFCTL0 &= ~REFMSTR;                      // Reset REFMSTR to hand over control to
											// ADC12_A ref control registers
		ADC12CTL0 = ADC12SHT0_8 + ADC12REFON + ADC12ON;
	                                            // Internal ref = 1.5V
		ADC12CTL1 = ADC12SHP;                     // enable sample timer
		ADC12MCTL0 = ADC12SREF_1 + ADC12INCH_10;  // ADC i/p ch A10 = temp sense i/p
		ADC12IE = 0x001;                          // ADC_IFG upon conv result-ADCMEMO
		ADC12CTL0 |= ADC12ENC;


		TA0CCTL0 = CCIE; // Timer A Compare Control Register enabled by the capture compare interrupt
		TA0CTL = TASSEL_1 | MC_1 | ID_2; // SMCLK/8, upmode
// ID_3 means Input Divider - determines how much the input clock is divided by.
// MC Means Mode Control - determines whether you want to count up, then stop, continously count, or count up then down

		TA0CCR0 = 0x12000; // The number the timer is counting to.



P1REN |= BIT1; // Enable pullup resistor of P2.1 (default: GND)
P1OUT |= BIT1; // Set pullup resistor to active (+3.3V) mode

P1IE |= BIT1; // P2.1 interrupt enabled
P1IFG &= ~BIT1; // P2.1 interrupt flag cleared


P1OUT &= 0x00; // Shut down pins on P1
P1DIR &= 0x00; // Set P1 pins as output
P2DIR &= ~BIT1; // Set P2.1 to input this is second button for extra credit
P1DIR |= BIT0; // P1.0 pin set as output the rest are input
P2REN |= BIT1;	// this configures the extra credit second button as a pullup resistor.
P2OUT |= BIT1;  // this allows the button to accept interrupts.


P2IE |= BIT1; // P1.1 interrupt enabled
P2IES |= BIT1; // P1.1 Hi/lo edge
P2IFG &= ~BIT1; // P1.1 IFG cleared
UCA1IE |= UCRXIE;					// THIS ENABLES INTERRUPTS FOR UART DO NOT REMOVE OR INTERRUPT WILL NOT WORK


ADC12CTL0 &= ~ADC12SC;
ADC12CTL0 |= ADC12SC;                   // Sampling and conversion start

__bis_SR_register(LPM3_bits + GIE);     // LPM3 with interrupts enabled
__no_operation();

getTemps();

}


// Set P1.0 to output direction
// Use The LED as an indicator
// Toggle P1.0 using exclusive-OR
// SW Delay
// volatile to prevent optimization
// Stop watchdog timer
  void OUTA_UART(unsigned char a){ //--------------------------------------------------------------- //*************************************************************** //--------------------------------------------------------------- // IFG2 register (1) = 1 transmit buffer is empty,

	  while (!(UCA1IFG & UCTXIFG)) ;
	  UCA1TXBUF = a;
  }


unsigned char INCHAR_UART(void){ //--------------------------------------------------------------- //*************************************************************** //--------------------------------------------------------------- // IFG2 register (0) = 1 receive buffer is full,
	while (!(UCA1IFG & UCRXIFG)) ;
	return UCA1RXBUF;
}

void init_UART(void) {
        P4SEL           |=      BIT4 | BIT5;			// the control signal for the multiplexor that sets P4.4 and 4.5 to control UART
        UCA1CTL1        |=      UCSWRST;
        UCA1CTL1        |=      UCSSEL_2;

        UCA1BR0         =       109;
        UCA1BR1         =       0;
        /* modulation */
        UCA1MCTL        =       UCBRS_2 | UCBRF_0;
        UCA1CTL1        &=      ~UCSWRST;
}
void init_Temps(void){

}
int getTemps(void){
	volatile float temperatureDegF = 0;
		volatile float temperatureDegC = 0;


		    // Temperature in Celsius. See the Device Descriptor Table section in the
		    // System Resets, Interrupts, and Operating Modes, System Control Module
		    // chapter in the device user's guide for background information on the
		    // used formula.
		    temperatureDegC = (float)(((long)temp - CALADC12_15V_30C) * (85 - 30)) /
		            (CALADC12_15V_85C - CALADC12_15V_30C) + 30.0f;
		    // Temperature in Fahrenheit Tf = (9/5)*Tc + 32
		    temperatureDegF = temperatureDegC * 9.0f / 5.0f + 32.0f;
		    OUTA_UART(temperatureDegF);
		    alltemps[index].tempInF = temperatureDegF;
		    alltemps[index].tempInC = temperatureDegC;
		    alltemps[index].hour = hours;
		    alltemps[index].min = minutes;
			alltemps[index].sec = seconds;
			index++;

			if(index == 32){
				// delete the oldest entry
				index = 31;
			}

}
void setTime(int h, int m, int s){
	hours = h;
	minutes = m;
	seconds = s;

}
void displayTime(){
	OUTA_UART(hours);
	OUTA_UART(minutes);
	OUTA_UART(seconds);


}


void initializeStruct(){


	int x = 0;
		for(x = 0; x < 32; x++){
			alltemps[x].hour = 0;
			alltemps[x].min = 0;
			alltemps[x].sec = 0;
			alltemps[x].tempInC = 0;
			alltemps[x].tempInF = 0;

		}
}
void displayAllTemps(void){
	int x = 0;
	int state = 0;
	for(x = 0; x < 32; x++){
		// if there is a valid time, then print it
		if(!(alltemps[x].hour == 0 && alltemps[x].min == 0 && alltemps[x].sec == 0)){
			displayTime();
			OUTA_UART(':');
			OUTA_UART(0x0D);
			OUTA_UART(0x0A);
			OUTA_UART(alltemps[x].tempInF);


			state = 1;
		}


	}



}
void sortStruct(){
	int x = 0;
	int y = 0;

	for(x = 0; x < 32; x++){
		for(y = 0; y < 32; y++){
			if(alltemps[x].hour > alltemps[y].hour){
				struct temperature temporary = alltemps[x];
				alltemps[x] = alltemps[y];
				alltemps[y] = temporary;

			}
			else if(alltemps[x].hour == alltemps[y].hour){
				if(alltemps[x].min > alltemps[y].min){
					struct temperature temporary = alltemps[x];
					alltemps[x] = alltemps[y];
					alltemps[y] = temporary;
				}
				else if(alltemps[x].sec > alltemps[y].sec){
					struct temperature temporary = alltemps[x];
					alltemps[x] = alltemps[y];
					alltemps[y] = temporary;
				}

			}

		}

	}


}
void useCommands(char c){
	// tsol

	if(c == 't'){
		displayTime();
	}
	else if(c == 's'){
		// set time
		// remember that when you set the time, you gotta convert the character to an int by subtracting for ascii
		// idea: take the first number, multiply by 10 (via sll and add) and then add the second # to the first #
		 char h1 = INCHAR_UART();
		 char h2 = INCHAR_UART();
		 char m1 = INCHAR_UART();
		 char m2 = INCHAR_UART();
		 char s1 = INCHAR_UART();
		 char s2 = INCHAR_UART();

		 // h1 and h2 represents 11 o clock, so h1 = 1, h2 = 1
		 // we need to multiply h1 by 10, because base 10.
		 // 10*h1 + h2 = the number we need.

	}
	// ideas for temp reading - use a struct
	else if(c== 'o'){
		// show oldest temp readings

	}
	else if(c == 'l'){
		// show all temp readings

	}

}

// timer interrupt
#pragma vector=TIMER0_A0_VECTOR
__interrupt void Timer_A0 (void)
{
	/*
	 * Ideas: Have timer interrupt once per second
	 * once it reaches 60, increment minute counter
	 * once minute counter = 60, increment hour counter
	 */

	seconds++;
	if(seconds == 60){
		minutes++;
		multiplesoffive++;
		seconds = 0;
		OUTA_UART(minutes);

	}
	if(minutes == 60){
		hours++;
		minutes = 0;
	}
	if(multiplesoffive == 5){
		// five minutes have passed, so you must grab a temperature reading
		multiplesoffive = 0;
		getTemps();

	}

	OUTA_UART(seconds);


	// comment this out
P1OUT ^= BIT0;
	temp = ADC12MEM0;                       // Move results, IFG is cleared
  __bic_SR_register_on_exit(LPM3_bits);   // Exit active CPU

}
// UART interrupt
#pragma vector=USCI_A1_VECTOR
__interrupt void USCI_A1_ISR(void)
{
  switch(__even_in_range(UCA1IV,4))
  {
  case 0:break;                             // Vector 0 - no interrupt
  case 2:                                   // Vector 2 - RXIFG
    while (!(UCA1IFG&UCTXIFG));             // USCI_A0 TX buffer ready?
    UCA1TXBUF = UCA1RXBUF;                  // TX -> RXed character
    char c = UCA1RXBUF;




    break;
  case 4:break;                             // Vector 4 - TXIFG
  default: break;
  }
}


// button interrupt
#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{



P1IFG &= ~BIT1; // P1.1 interrupt flag cleared
}

#pragma vector=PORT2_VECTOR
__interrupt void Port_2(void)
{



P2IFG &= ~BIT1; // P1.1 interrupt flag cleared
}
/*
#pragma vector=ADC12_VECTOR
__interrupt void ADC12ISR (void)
{
  switch(__even_in_range(ADC12IV,34))
  {
  case  0: break;                           // Vector  0:  No interrupt
  case  2: break;                           // Vector  2:  ADC overflow
  case  4: break;                           // Vector  4:  ADC timing overflow
  case  6:                                  // Vector  6:  ADC12IFG0
    temp = ADC12MEM0;                       // Move results, IFG is cleared
    __bic_SR_register_on_exit(LPM3_bits);   // Exit active CPU
    break;
  case  8: break;                           // Vector  8:  ADC12IFG1
  case 10: break;                           // Vector 10:  ADC12IFG2
  case 12: break;                           // Vector 12:  ADC12IFG3
  case 14: break;                           // Vector 14:  ADC12IFG4
  case 16: break;                           // Vector 16:  ADC12IFG5
  case 18: break;                           // Vector 18:  ADC12IFG6
  case 20: break;                           // Vector 20:  ADC12IFG7
  case 22: break;                           // Vector 22:  ADC12IFG8
  case 24: break;                           // Vector 24:  ADC12IFG9
  case 26: break;                           // Vector 26:  ADC12IFG10
  case 28: break;                           // Vector 28:  ADC12IFG11
  case 30: break;                           // Vector 30:  ADC12IFG12
  case 32: break;                           // Vector 32:  ADC12IFG13
  case 34: break;                           // Vector 34:  ADC12IFG14
  default: break;
  }
}*/




